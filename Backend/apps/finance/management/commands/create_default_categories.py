"""
Comando Django para criar as categorias padr√£o do sistema.
"""

from django.core.management.base import BaseCommand
from apps.finance.models import Category


class Command(BaseCommand):
    help = 'Cria as categorias padr√£o do sistema FinanceTracker'

    def handle(self, *args, **options):
        """Executa o comando."""
        
        # Lista de categorias padr√£o
        default_categories = [
            # Receitas
            {
                'name': 'Sal√°rio',
                'description': 'Sal√°rio mensal e benef√≠cios trabalhistas',
                'icon': 'üí∞',
                'color': '#10B981',
                'category_type': 'INCOME',
                'is_default': True,
            },
            {
                'name': 'Freelance',
                'description': 'Trabalhos freelancer e projetos extras',
                'icon': 'üíª',
                'color': '#3B82F6',
                'category_type': 'INCOME',
                'is_default': True,
            },
            {
                'name': 'Investimentos',
                'description': 'Dividendos, juros e rendimentos',
                'icon': 'üìà',
                'color': '#8B5CF6',
                'category_type': 'INCOME',
                'is_default': True,
            },
            {
                'name': 'Vendas',
                'description': 'Vendas de produtos ou servi√ßos',
                'icon': 'üõí',
                'color': '#F59E0B',
                'category_type': 'INCOME',
                'is_default': True,
            },
            {
                'name': 'Outros Ganhos',
                'description': 'Outras fontes de renda',
                'icon': 'üí∏',
                'color': '#06B6D4',
                'category_type': 'INCOME',
                'is_default': True,
            },
            
            # Despesas
            {
                'name': 'Alimenta√ß√£o',
                'description': 'Supermercado, restaurantes e delivery',
                'icon': 'üçΩÔ∏è',
                'color': '#EF4444',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Transporte',
                'description': 'Combust√≠vel, transporte p√∫blico e manuten√ß√£o',
                'icon': 'üöó',
                'color': '#F97316',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Moradia',
                'description': 'Aluguel, financiamento e contas da casa',
                'icon': 'üè†',
                'color': '#84CC16',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Lazer',
                'description': 'Entretenimento, viagens e divers√£o',
                'icon': 'üéâ',
                'color': '#EC4899',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Sa√∫de',
                'description': 'M√©dicos, medicamentos e planos de sa√∫de',
                'icon': 'üè•',
                'color': '#14B8A6',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Educa√ß√£o',
                'description': 'Cursos, livros e material educativo',
                'icon': 'üìö',
                'color': '#6366F1',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Vestu√°rio',
                'description': 'Roupas, cal√ßados e acess√≥rios',
                'icon': 'üëï',
                'color': '#A855F7',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Tecnologia',
                'description': 'Eletr√¥nicos, software e assinaturas digitais',
                'icon': 'üíª',
                'color': '#0EA5E9',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Servi√ßos',
                'description': 'Servi√ßos profissionais e manuten√ß√µes',
                'icon': 'üîß',
                'color': '#64748B',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Impostos',
                'description': 'Impostos, taxas e contribui√ß√µes',
                'icon': 'üèõÔ∏è',
                'color': '#DC2626',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Pets',
                'description': 'Gastos com animais de estima√ß√£o',
                'icon': 'üêï',
                'color': '#D97706',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Doa√ß√µes',
                'description': 'Caridade e doa√ß√µes',
                'icon': '‚ù§Ô∏è',
                'color': '#F43F5E',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
            {
                'name': 'Outros Gastos',
                'description': 'Outras despesas n√£o categorizadas',
                'icon': 'üìã',
                'color': '#6B7280',
                'category_type': 'EXPENSE',
                'is_default': True,
            },
        ]

        created_count = 0
        updated_count = 0

        for category_data in default_categories:
            category, created = Category.objects.get_or_create(
                name=category_data['name'],
                is_default=True,
                defaults=category_data
            )
            
            if created:
                created_count += 1
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Categoria criada: {category.icon} {category.name}')
                )
            else:
                # Atualiza campos se necess√°rio
                updated = False
                for field, value in category_data.items():
                    if field != 'name' and getattr(category, field) != value:
                        setattr(category, field, value)
                        updated = True
                
                if updated:
                    category.save()
                    updated_count += 1
                    self.stdout.write(
                        self.style.WARNING(f'üîÑ Categoria atualizada: {category.icon} {category.name}')
                    )
                else:
                    self.stdout.write(
                        self.style.HTTP_INFO(f'‚ÑπÔ∏è Categoria j√° existe: {category.icon} {category.name}')
                    )

        # Resumo
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS(f'üìä RESUMO:'))
        self.stdout.write(self.style.SUCCESS(f'   ‚Ä¢ {created_count} categorias criadas'))
        self.stdout.write(self.style.SUCCESS(f'   ‚Ä¢ {updated_count} categorias atualizadas'))
        self.stdout.write(self.style.SUCCESS(f'   ‚Ä¢ {len(default_categories)} categorias padr√£o no total'))
        self.stdout.write('='*50)
        
        # Verifica se todas foram criadas
        total_categories = Category.objects.filter(is_default=True).count()
        if total_categories == len(default_categories):
            self.stdout.write(
                self.style.SUCCESS('üéâ Todas as categorias padr√£o foram configuradas com sucesso!')
            )
        else:
            self.stdout.write(
                self.style.ERROR(f'‚ö†Ô∏è Esperado: {len(default_categories)}, Encontrado: {total_categories}')
            )
